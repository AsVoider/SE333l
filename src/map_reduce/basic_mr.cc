#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
    bool isLetter(char a) {
        if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z'))
            return true;
        return false;
    };
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::vector<KeyVal> ret;
        auto pre_ptr = 0, now_ptr = 0;
        while (now_ptr < content.size()) {
            auto char_ = content[now_ptr];
            if (isLetter(char_)) {
                now_ptr++;
                continue;
            }
            if (pre_ptr == now_ptr) {
                now_ptr++;
                pre_ptr++;
                continue;
            }
            auto word = content.substr(pre_ptr, now_ptr - pre_ptr);
            auto kv = KeyVal(word, "1");
            ret.emplace_back(kv);
            now_ptr++;
            pre_ptr = now_ptr;
        }
        if (pre_ptr < now_ptr) {
            auto word = content.substr(pre_ptr, now_ptr - pre_ptr);
            auto kv = KeyVal(word, "1");
            ret.emplace_back(kv);
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        std::string ret = "0";
        auto i = 0;
        for (auto &val : values) {
            i += std::stoul(val);
        }
        return std::to_string(i);
    }
}